#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0412,C0115,C0116,W0212,R0903,C0207,C0413,W0611
# pylint: disable=C0411,E0402,E0611,C2801


"runtime"


import getpass
import importlib
import os
import pwd
import readline
import shutil
import sys
import termios
import time
import threading
import traceback


sys.path.insert(0, os.getcwd())


from bot.spec import Broker, Censor, Cfg, Client, Errors, Event
from bot.spec import Object, CLI, Handler, Storage, keys
from bot.spec import command, cprint, daemon, debug, parse, scan, forever
from bot.spec import launch, mods, name, privileges, shutdown, spl


class Table(Object):

    modules = Object()

    @staticmethod
    def add(module):
        Table.modules[name] = module

    @staticmethod
    def get(fqn):
        return getattr(Table.modules, fqn, None)

    @staticmethod
    def init(self):
        for module in values(Table.modules):
            if "init" in dir(module):
                try:
                    module.init()
                except Exception as ex:
                    Errors.add(ex)

    @staticmethod
    def scan(path):
        mns = []
        pname = path.split(os.sep)[-1]
        for fnm in os.listdir(path):
            if fnm.startswith("__"):
                continue
            if not fnm.endswith(".py"):
                continue
            fnn = fnm[:-3]
            fqn = f"{pname}.{fnn}"
            mod = importlib.import_module(fqn, pname)
            Table.add(mod)
            Storage.scan(mod)
            Handler.scan(mod)
            

Censor.output = print
Storage.wd = Cfg.wd


class Console(CLI):

    def dispatch(self, evt):
        parse(evt)
        command(evt)
        evt.wait()

    def poll(self) -> Event:
        return self.event(input("> "))


def wrap(func) -> None:
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
        sys.stdout.flush()
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)


def main():
    parse(Cfg, " ".join(sys.argv[1:]))
    if Cfg.wd:
        Storage.wd = Cfg.wd
    if "v" in Cfg.opts:
        dtime = time.ctime(time.time()).replace("  ", " ")
        cprint(f"{Cfg.name.upper()} started at {dtime} {Cfg}")
    if Cfg.md:
        cprint(f"scanning {Cfg.md}")
        Table.scan(Cfg.md)
    Cfg.mod = ",".join(keys(Table.modules))
    if "n" in Cfg.opts:
        Cfg.commands = False
    if "d" in Cfg.opts:
        daemon(Cfg.pidfile)
    if "d" in Cfg.opts or "s" in Cfg.opts:
        privileges(Cfg.user)
        forever()
    elif "c" in Cfg.opts:
        if "w" in Cfg.opts:
            for thr in thrs:
                thr.join()
                cprint(f"ready {thr.name}")
        csl = Console()
        csl.start()
        csl.forever()
    else:
        cli = Console()
        evt = cli.event(Cfg.otxt)
        parse(evt)
        command(evt)
        evt.wait()


if __name__ == "__main__":
    wrap(main)
    shutdown()
