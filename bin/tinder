#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0115,C0116,C0413,E0401,R0903,E0611,C0412,C0103,W0702,R0402


"created clients"


import os
import random
import shutil
import sys
import termios
import time
import _thread


WORKDIR = os.path.expanduser("~")


sys.path.insert(0, os.getcwd())


from bot.spec import Cfg, Censor, Client, Object, Storage
from bot.spec import keys, laps, launch, mods, parse, scan
from bot.spec import command, debug


modules = None


try:
    import bot.modules as modules
except:
    try:
        import modules
    except:
        pass


DATE = time.ctime(time.time()).replace("  ", " ")
STARTTIME = time.time()


Censor.output = print


Cfg.debug = True
Cfg.mod = ",".join(mods(modules.__path__[0]))
Cfg.name = "tinder"
Cfg.silent = False
Cfg.skip = ["debug",]


Storage.wd = ".test"


paylock = _thread.allocate_lock()
outlock = _thread.allocate_lock()


errors = []
events = []


param = Object()
param.cfg = ["server=localhost", ""]
param.cmd = [""]
param.dlt = ["~bart@127.0.0.1"]
param.dne = ["test4", ""]
param.dpl = ["reddit title,summary,link", ""]
param.err = [""]
param.flt = ["", "0"]
param.rem = ["reddit", ""]
param.fnd = [
             'log',
             "config",
             "todo",
             "rss",
             "todo txt==test",
             "config server==localhost",
             "rss rss==reddit"
            ]
param.log = ["test1", ""]
param.met = ["~bart@127.0.0.1"]
param.mod = [""]
param.nme = ["reddit reddit"]
param.pwd = ["bla bla"]
param.rem = ["reddit"]
param.rss = ["https://www.reddit.com/r/python/.rss"]
param.shp = ["bread", "butter", "cheese"]
param.tdo = ["test4", ""]
param.thr = [""]


class CLI(Client):

    def dosay(self, channel, txt):
        with outlock:
            if txt and "v" in Cfg.opts:
                print(txt.rstrip())


def consume(evts):
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        if not evt.result:
            print(f"no result for {evt.cmd}")
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt) -> None:
    cmds = list(keys(clt.cmds))
    random.shuffle(cmds)
    with paylock:
        nmr = 0
        for cmnd in cmds:
            for ex in getattr(param, cmnd, [""]):
                evt = clt.event(cmnd + " " + ex)
                parse(evt)
                if "t" in Cfg.opts:
                    clt.put(evt)
                    events.append(evt)
                else:
                    command(evt)
                nmr += 1
        return nmr


def wrap(func) -> None:
    if "d" in Cfg.opts:
        debug("terminal disabled!")
        return
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main() -> None:
    if os.path.exists(Storage.wd):
        shutil.rmtree(Storage.wd)
    parse(Cfg, " ".join(sys.argv[1:]))
    scan(modules, Cfg.mod)
    nrs = Cfg.index or 1
    cli = CLI()
    cli.start()
    waiters = []
    for _nr in range(nrs):
        waiters.append(launch(payload, cli, name=f"payload {_nr}"))
    result = 1
    for wtr in waiters:
        result += wtr.join() or 1
    consume(events)
    endtime = time.time()
    lap = laps(endtime - STARTTIME)
    percall = (endtime - STARTTIME)/result
    print(f"{lap} {result} {percall}")


if __name__ == "__main__":
    wrap(main)
